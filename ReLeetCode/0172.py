class Solution:
    def trailingZeroes(self, n: int) -> int:
        factor_five = 5
        ans = 0
        while factor_five <= n:
            ans += n // factor_five
            factor_five *= 5
        return ans

# 阶乘的结果中末尾0的个数, 有所有相乘数字中2和5的个数决定的
# 因为2是所有偶数的因数, 所以其个数一定比5多.
# 因此, 该问题转化为求参与阶乘的所有数, 他们一共有多少个因数5
# n! = 1 * 2 * 3 * 4 * (1 * 5) * ... * (2 * 5) * ... * (3 * 5) *... * n  我们可以发现每5个数,就会出现一个5因数
# 所以我们将 n / 5 可以得到一部分结果.
# 我们继续观察发现
# 其中某些项 为 ...  (1 * 5) * ... * (1 * 5 * 5) * ... * (2 * 5 * 5) * ... * (3 * 5 * 5) * ... * n, 在经过上面除5的过程后, 发现
# 还有5的因数的存在, 观察发现, 每25个数, 会有一个 5的因数
# 继续 n / 25
# 同理会发现 1 * 5 * 5 * 5 ...
# 因此, 尾0的个数就是n/5 + n/ 25 + n /125的和

# 时间复杂度 O(lgn)
# 空间复杂度 O(1)